Currently, whenever some events are triggered, the status of the monitor will be updated permanently!

Consider the code:

 Vector<Integer> v = new Vector<Integer>();
   
        Iterator i = v.iterator();
        int sum = 0;
        
        i.hasNext();

	
	sum += (Integer)i.next();            
	
        
        System.out.println("sum: " + sum);


Although hasNext() is called before next(), it does not provide any useful info w.r.t the environment when we execute 'next()' method.

The current implementation of javamop seems only care whether some hasNext method is called before calling next() method, but does not 

consider the scope of hasNext() event. 

E.g. if(i.hasNext()){...}
	i.next();

The effect of i.hasNext() should only be within the 'then' block. It has nothing to do with code outside of that block!

Proposal: make the implementation of javamop closer to the theory of MOP.

Only update the status of monitor if the hasNext() returns true. This idea has already been specified by the paper.
it is strange that why it has not been implemented.
