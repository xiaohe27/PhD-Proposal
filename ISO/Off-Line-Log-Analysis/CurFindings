log.ml:
Each log entry is a tsdb, which can be matched to Some (ts, db)


tsdb:
      | AT STR db AT            { f "tsdb(next)"; Some (MFOTL.ts_of_string "Log_parser" $2, make_db $3) }
      | AT STR db EOF           { f "tsdb(last)"; Some (MFOTL.ts_of_string "Log_parser" $2, make_db $3) }
      | AT EOF                  { f "tsdb(ts eof)"; None }
      | EOF                     { f "tsdb(eof)"; None }


db:
      | table db                { f "db(list)"; add_table $2 $1 }
      |                         { f "db()"; [] }

table:
      | STR relation            { f "table"; make_table $1 $2 }

relation:
      | tuple relation          { f "relation(list)"; $1::$2 }
      |                         { f "relation(end)"; [] }

tuple: 
      | LPA fields RPA          { f "tuple"; $2 }


fields:
      | STR COM fields	        { f "fields(list)"; $1::$3 }
      | STR 	                { f "fields(end)"; [$1] }
      |  	                { f "fields()"; [] }



MFOTL is very expressive in the sense that it captures the concurrent behaviors of a big system.
Different components of a system can change states independently at the same time!
