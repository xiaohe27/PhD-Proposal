Preparation: n processors in RING topology (indexed from 0 to n-1)
            are ready for analyzing the property P of the log file.


Step 1: get the length of the single log file, say L

Step 2: divide the total length by the number of processors,
	Processor i will be responsible for analyzing the range [L/n * i, L/n * (i+1))

Step 3 (Criticle Local Computation for task decomposition):
	Each processor i (0<i<n, i.e. every processor except processor 0) do:
		Start from the beginning of the its partition, and try to find a seqence of events that
		match the property P in complete form (or just locate one event that falls outside of the desired pattern).
		Record the starting index we found, denote it as 'f_i'.
		Update its own starting point to 'f_i', and also transmit 'f_i' to its left neighbor (i.e. processor i-1),
		so that processor i-1 can update its ending index to 'f_i'.

Step 4: Each processor does the analysis of the log file independently using the best serial algorithm.

Step 5: Merge the output to a single destination?
or simply keep the results locally (maybe the latter is a good idea if the data needed to be transmitted is very huge).


P.S: The multiple processors are not necessarily in ring architecture physically. There are
 well-known algorithms for the mappings between different topologies so that the communication
 overheads can be minimized.

In order to make the idea works, it is vital to compute the starting index for each processor correctly.
As far as I'm concerned, we should impose a new method in the parser's interface looks like:
int getStartingIndexInLogFileThatIsOutsideOfProperty(Property p); //approach 1

Appoach 1 seems to be more efficient if it is hard to find a complete match of property p.

int getStartingIndexInLogFileForProperty(Property p);  //approach 2

Approach 2 may be more efficient if very few events are outside of the desired pattern.




